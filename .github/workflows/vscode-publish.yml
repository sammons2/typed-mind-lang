name: Publish VS Code Extension

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Dry run (no actual publishing)'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'
      prerelease:
        description: 'Publish as pre-release'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'

# Prevent concurrent publishing
concurrency:
  group: vscode-publish-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: read

jobs:
  validate:
    name: Validate Extension
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      version: ${{ steps.version.outputs.version }}
      should_publish: ${{ steps.check.outputs.should_publish }}
    steps:
      - name: Checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Setup Node and pnpm
        uses: ./.github/actions/setup-node-pnpm

      - name: Get version
        id: version
        run: |
          VERSION=$(jq -r '.version' lib/typed-mind-vscode-extension/package.json)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Extension version: $VERSION"

      - name: Check if should publish
        id: check
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          EXTENSION_ID="sammons.typed-mind"
          
          echo "Checking if $EXTENSION_ID@$VERSION exists on marketplace..."
          
          # Check if version already exists
          if npx @vscode/vsce show "$EXTENSION_ID" --json 2>/dev/null | jq -e ".versions[] | select(.version == \"$VERSION\")" > /dev/null 2>&1; then
            echo "Version $VERSION already exists on marketplace"
            echo "should_publish=false" >> $GITHUB_OUTPUT
          else
            echo "Version $VERSION not found on marketplace, will publish"
            echo "should_publish=true" >> $GITHUB_OUTPUT
          fi

      - name: Validate extension
        run: |
          cd lib/typed-mind-vscode-extension
          
          # Check required files exist
          for file in package.json README.md CHANGELOG.md; do
            if [ ! -f "$file" ]; then
              echo "Error: Required file $file not found"
              exit 1
            fi
          done
          
          # Validate package.json
          npx @vscode/vsce ls --no-dependencies
          
          cd ../..

  build:
    name: Build Extension
    needs: validate
    if: needs.validate.outputs.should_publish == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Setup Node and pnpm
        uses: ./.github/actions/setup-node-pnpm

      - name: Build TypedMind packages
        run: |
          # Build only the extension and its dependencies
          cd lib/typed-mind-vscode-extension
          pnpm run build

      - name: Package extension
        run: |
          cd lib/typed-mind-vscode-extension
          
          # Install vsce locally if needed
          npm install --save-dev @vscode/vsce
          
          # Package the extension
          npx @vscode/vsce package --no-dependencies
          
          # Verify VSIX was created
          VSIX_FILE=$(ls *.vsix | head -1)
          if [ -z "$VSIX_FILE" ]; then
            echo "Error: No VSIX file created"
            exit 1
          fi
          
          echo "Created $VSIX_FILE"
          echo "VSIX_FILE=$VSIX_FILE" >> $GITHUB_ENV
          
          cd ../..

      - name: Upload VSIX artifact
        uses: actions/upload-artifact@50769540e7f4bd5e21e526ee35c689e35e0d6874 # v4.4.0
        with:
          name: vscode-extension-vsix
          path: lib/typed-mind-vscode-extension/*.vsix
          retention-days: 7

  publish:
    name: Publish to Marketplace
    needs: [validate, build]
    if: needs.validate.outputs.should_publish == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 15
    environment:
      name: vscode-marketplace
      url: https://marketplace.visualstudio.com/items?itemName=Sammons.typed-mind
    steps:
      - name: Checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Setup Node and pnpm
        uses: ./.github/actions/setup-node-pnpm

      - name: Download VSIX
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          name: vscode-extension-vsix
          path: ./artifacts

      - name: Publish extension
        if: ${{ github.event.inputs.dry_run != 'true' || github.event.inputs.dry_run == '' || github.event.inputs.dry_run == null }}
        run: |
          VSIX_FILE=$(find ./artifacts -name "*.vsix" | head -1)
          
          if [ -z "$VSIX_FILE" ]; then
            echo "Error: No VSIX file found"
            exit 1
          fi
          
          echo "Publishing $VSIX_FILE..."
          
          if [[ "${{ github.event.inputs.prerelease }}" == "true" ]]; then
            npx @vscode/vsce publish --pre-release --pat "${{ secrets.VSCE_PAT }}" --packagePath "$VSIX_FILE"
          else
            npx @vscode/vsce publish --pat "${{ secrets.VSCE_PAT }}" --packagePath "$VSIX_FILE"
          fi

      - name: Dry run summary
        if: ${{ github.event.inputs.dry_run == 'true' }}
        run: |
          VSIX_FILE=$(find ./artifacts -name "*.vsix" | head -1)
          echo "Dry run mode - would have published: $VSIX_FILE"
          
          # Show package details
          unzip -l "$VSIX_FILE" | head -20

      - name: Verify publication
        if: ${{ github.event.inputs.dry_run != 'true' || github.event.inputs.dry_run == '' || github.event.inputs.dry_run == null }}
        run: |
          VERSION="${{ needs.validate.outputs.version }}"
          EXTENSION_ID="sammons.typed-mind"
          
          echo "Waiting for extension to be available on marketplace..."
          
          # Wait for extension to be available
          MAX_RETRIES=30
          RETRY_COUNT=0
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            if npx @vscode/vsce show "$EXTENSION_ID" --json 2>/dev/null | jq -e ".versions[] | select(.version == \"$VERSION\")" > /dev/null 2>&1; then
              echo "✓ Extension $EXTENSION_ID@$VERSION is now available on marketplace"
              break
            fi
            
            RETRY_COUNT=$((RETRY_COUNT + 1))
            echo "Waiting... (attempt $RETRY_COUNT/$MAX_RETRIES)"
            sleep 10
          done
          
          if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
            echo "Warning: Timeout waiting for extension to be available"
            exit 1
          fi

  summary:
    name: Publishing Summary
    needs: [validate, build, publish]
    if: always()
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Generate summary
        run: |
          echo "## VS Code Extension Publishing Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### Version Information" >> $GITHUB_STEP_SUMMARY
          echo "- Version: ${{ needs.validate.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- Extension ID: sammons.typed-mind" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.validate.outputs.should_publish }}" != "true" ]]; then
            echo "ℹ️ Extension version already exists on marketplace - skipped publishing" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ github.event.inputs.dry_run }}" == "true" ]]; then
            echo "ℹ️ Dry run completed - no actual publishing performed" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.publish.result }}" == "success" ]]; then
            echo "✅ Successfully published extension to VS Code Marketplace" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "[View on Marketplace](https://marketplace.visualstudio.com/items?itemName=sammons.typed-mind)" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Publishing failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ github.event.inputs.prerelease }}" == "true" ]]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "ℹ️ Published as pre-release version" >> $GITHUB_STEP_SUMMARY
          fi